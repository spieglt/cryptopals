y := y xor (y >> u)
y := y xor ((y << s) and b)
y := y xor ((y << t) and c)

u = 11
s = 7
t = 15
b = 0x9D2C5680			10011101001011000101011010000000
c = 0xEFC60000			11101111110001100000000000000000


starting with			10111111011101001010010011100111	3212092647

left shift by 7			10111010010100100111001110000000
then & b				10011101001011000101011010000000
						================================
						10011000000000000101001010000000	2550157952 MASK

ONLY THEN XOR WITH STARTING

mask					10011000000000000101001010000000	^
original				10111111011101001010010011100111
						================================
given					00100111011101001111011001100111	661976679

So actually, most bits are preserved. But which ones?
The bottom 7 of the mask were guaranteed to be 0, both by the left-shift and the &ing.
So guaranteed to be valid through the xor. But of the next 7 up, only 2/4/5/7 were left on by the &. The mask is b minus the left-shifted bits that are 0.

So the bottom 7 are good. And what happened to them? They were left-shifted by 7 and then &'d to make the mask, so we can recalculate the mask, and once we have that, we can xor the mask against the given to get the original!

current = known bits
mask = (
	the indices of the lsv to the left of the known, &'d with the same indices of b
)
real = given ^ mask

FIRST 7 of given == FIRST 7 of known.
so we'll use the FIRST 7 of given/known, left shift them by 7, and them with SECOND 7 of b, then xor them with SECOND 7 of given.

or will we use the (bottom up-to-7 of the top 7 of known), left-shift them by i, 

then we'll take the THIRD 7 of known

i = 3
lsv = 7
num_working = min(lsv, 32 - num_known)
take top lsv of known, right shift by i * lsv, take bottom num_working of that, then left-shift by i * lsv

do the same to magic_number

then & them, then add to known, and increase num_known by num_working


//////////////////////////////////////////////////////////////////////////

starting with			10111111011000110100100010001110	3210954894
left-shift by 7			10110001101001000100011100000000	then xor
						================================
						00001110110001110000111110001110

so bottom 7 are guaranteed to be good. what would these have been xor'd against? the chunk of 7 that is iteration # away.

